Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\n\r\nimport monstre\r\nimport tour\r\nfrom animer_gif import Animer_gif\r\n\r\n\r\nclass Vue:\r\n    def __init__(self, parent):\r\n        self.parent = parent\r\n\r\n        self.modele = self.parent.modele\r\n        self.root = Tk()\r\n        self.root.title(\"TowerDefence, alpha_0.1\")\r\n        self.creer_interface()\r\n    def compter_items(self,evt):\r\n        print(len(self.canevas.find_all()))\r\n        print((self.canevas.find_all()))\r\n    def creer_tour(self, event):\r\n        if (self.modele.argent - tour.Tour.prix) >= 0:\r\n            self.parent.creer_tour(event)\r\n\r\n    def creer_interface(self):\r\n        # cadre HUD affichant la duree\r\n        self.bg = PhotoImage(file=\"Images/carte.png\")\r\n        self.bg.width()\r\n\r\n        self.cadre_depart = Frame(self.root, bg='gray')\r\n        bouton_depart = Button(self.cadre_depart, text='Commencer la partie', command=self.parent.debuter_partie)\r\n\r\n        self.image_argent = PhotoImage(file=\"Images/money.png\")\r\n        label_image_argent = Label(self.cadre_depart, image=self.image_argent, height=30)\r\n\r\n        self.var_argent = StringVar()\r\n        label_argent = Label(self.cadre_depart, width=10, height=2, font=('Arial', 11),\r\n                             textvariable=self.var_argent)\r\n\r\n        label_image_score = Label(self.cadre_depart, text='SCORE', height=1)\r\n        label_vague_texte = Label(self.cadre_depart, text='VAGUE', height=1)\r\n        self.var_vague = StringVar()\r\n        label_vague = Label(self.cadre_depart, width=5, height=1, font=('Arial', 11),\r\n                            textvariable=self.var_vague)\r\n\r\n        self.var_vie = StringVar()\r\n        label_vie_texte = Label(self.cadre_depart, text='VIE', height=1)\r\n\r\n        self.var_score = StringVar()\r\n        label_score = Label(self.cadre_depart, width=5, height=1, font=('Arial', 11),\r\n                            textvariable=self.var_vie)\r\n        label_vie = Label(self.cadre_depart, width=5, height=1, font=('Arial', 11),\r\n                          textvariable=self.var_score)\r\n\r\n        self.canevas = Canvas(self.root, width=self.modele.largeur_carte, height=self.modele.hauteur_carte)\r\n\r\n        self.cadre_depart.pack(expand=True, fill=BOTH)\r\n        bouton_depart.pack(side=LEFT)\r\n        label_argent.pack(side=RIGHT)\r\n        label_image_argent.pack(side=RIGHT)\r\n        label_score.pack(side=RIGHT, padx=20)\r\n        label_vie_texte.pack(side=RIGHT, padx=20)\r\n        label_vie.pack(side=RIGHT, padx=20)\r\n        label_image_score.pack(side=RIGHT)\r\n        label_vague.pack(side=RIGHT, padx=20)\r\n        label_vague_texte.pack(side=RIGHT, padx=20)\r\n        self.canevas.pack()\r\n\r\n        for i in self.modele.liste_tours:\r\n            self.canevas.create_rectangle(i.x - i.demie_taille, i.y - i.demie_taille, i.x + i.demie_taille,\r\n                                          i.y + i.demie_taille, fill=\"black\", stipple=\"gray25\")\r\n\r\n    def afficher_debut_partie(self):\r\n        self.canevas.delete(\"dynamique\")\r\n\r\n        self.canevas.create_image(self.modele.largeur_carte / 2, self.modele.hauteur_carte / 2, image=self.bg,\r\n                                  tags=(\"statique\", \"bg\"))\r\n        self.ouvrir_gif()\r\n\r\n\r\n\r\n    def afficher_partie(self):\r\n        self.canevas.delete(\"dynamique\")\r\n        self.var_argent.set(str(self.modele.argent) + \"$\")\r\n        self.var_score.set(self.modele.pointage)\r\n        self.var_vie.set(self.modele.vie)\r\n        self.var_vague.set(self.modele.vague)\r\n\r\n        self.canevas.tag_bind(\"bg\", \"<Button-1>\", self.creer_tour)\r\n        self.canevas.tag_bind(\"bg\", \"<Button-3>\", self.compter_items)\r\n        self.afficher_path()\r\n\r\n        self.afficher_tours()\r\n        for i in self.modele.animations:\r\n            i = self.modele.animations[i]\r\n            self.canevas.create_image(i.x, i.y, image=i.images[i.indice], tags=\"dynamique\")\r\n        self.afficher_monstres()\r\n\r\n    def ouvrir_gif(self):\r\n        rep = self.charger_gifs()\r\n        if rep:\r\n            self.parent.creer_anim(rep)\r\n\r\n    def charger_gifs(self):\r\n        nom_gif = \"Images/portal.gif\"\r\n        if nom_gif:\r\n            listeimages = []\r\n            testverite = 1\r\n            noindex = 0\r\n            while testverite:\r\n                try:\r\n                    img = PhotoImage(file=nom_gif, format=\"gif -index \" + str(noindex))\r\n                    listeimages.append(img)\r\n                    noindex += 1\r\n                except Exception:\r\n                    testverite = 0\r\n            return [nom_gif, listeimages]\r\n\r\n    def afficher_path(self):\r\n        self.canevas.create_rectangle(0, 400, 240, 475, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(160, 160, 240, 400, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(160, 160, 485, 250, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(400, 160, 485, 560, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(400, 480, 800, 560, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(720, 320, 800, 560, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(720, 320, 1200, 400, fill=\"\", outline=\"\", tags=\"statique\")\r\n\r\n    def afficher_monstres(self):\r\n        for i in self.modele.liste_monstres_terrain:\r\n\r\n            if isinstance(i, monstre.Monstre):\r\n                self.canevas.create_oval(i.x - 5, i.y - 5, i.x + 5, i.y + 5, fill=\"black\", tags=(\"dynamique\"))\r\n                x1 = i.x - 10\r\n                x2 = x1 + 20\r\n                x3 = x1 + (i.vie / monstre.Monstre.vie_max * 20)\r\n                self.canevas.create_rectangle(x1, i.y - 15, x2, i.y - 10, fill=\"red\", tags=(\"dynamique\"))\r\n                self.canevas.create_rectangle(x1, i.y - 15, x3, i.y - 10, fill=\"green\", tags=(\"dynamique\"))\r\n\r\n            if isinstance(i, monstre.Boss):\r\n                self.canevas.create_oval(i.x - 15, i.y - 15, i.x + 15, i.y + 15, fill=\"red\", tags=(\"dynamique\", \"boss\"))\r\n                x1 = i.x - 10\r\n                x2 = x1 + 20\r\n                x3 = x1 + (i.vie / monstre.Boss.vie_max * 20)\r\n                self.canevas.create_rectangle(x1, i.y - 15, x2, i.y - 10, fill=\"red\", tags=\"dynamique\")\r\n                self.canevas.create_rectangle(x1, i.y - 15, x3, i.y - 10, fill=\"green\", tags=\"dynamique\")\r\n\r\n    def afficher_tours(self):\r\n        for i in self.modele.liste_tours:\r\n            self.canevas.create_rectangle(i.x - i.demie_taille, i.y - i.demie_taille, i.x + i.demie_taille,\r\n                                          i.y + i.demie_taille, fill=\"yellow\", tags=\"dynamique\")\r\n            self.canevas.create_oval(i.x - i.demie_taille, i.y - i.demie_taille, i.x + i.demie_taille,\r\n                                     i.y + i.demie_taille, fill=\"black\", tags=\"dynamique\")\r\n\r\n            self.canevas.create_oval(i.x - i.rayon, i.y - i.rayon, i.x + i.rayon, i.y + i.rayon, fill=\"\",\r\n                                     tags=\"dynamique\")\r\n\r\n            if len(i.liste_projectiles) != 0:\r\n                for j in i.liste_projectiles:\r\n                    self.canevas.create_oval(j.x - 5, j.y - 5, j.x + 5, j.y + 5,\r\n                                             fill=\"blue\", tags=\"dynamique\")\r\n\r\n    def afficher_fin_partie(self):\r\n        self.canevas.delete(\"dynamique\")\r\n        self.var_argent.set(str(self.modele.argent) + \"$\")\r\n        self.var_score.set(self.modele.pointage)\r\n        self.var_vie.set(self.modele.vie)\r\n        self.var_vague.set(self.modele.vague)\r\n\r\n        print(\"fin de partie\")\r\n\r\n\r\nclass Modele:\r\n    def __init__(self, parent):\r\n        self.parent = parent\r\n        self.largeur_carte = 1200\r\n        self.hauteur_carte = 800\r\n        self.path = [[200, 450], [200, 200], [440, 200], [440, 520], [760, 520], [760, 370], [1250, 370]]\r\n        self.fin_de_partie = 1\r\n        self.delai_creation_creep = 0\r\n        self.nb_creep_vague = 10\r\n        self.delai_creation_creep_max = 20\r\n        self.pointage = 0\r\n        self.argent = 1000\r\n        self.score = 0\r\n        self.vie = 3\r\n        self.vague = 0\r\n        self.liste_monstres_terrain = []\r\n        self.liste_monstres_entrepot = []\r\n        self.liste_projectiles = []\r\n        self.liste_tours = []\r\n        self.animations = {}\r\n\r\n    def jouer_partie(self):\r\n        self.bouger_monstres()\r\n        self.attaque_monstres()\r\n        self.verifier_etat_monstre()\r\n        self.verifier_etat_joueur()\r\n        return self.fin_de_partie\r\n\r\n    def creer_monstre(self):\r\n        self.vague += 1\r\n        vitesse = 2\r\n        vie = 100 + self.vague * 10\r\n\r\n        if self.vague == 2:\r\n            vitesse = 10\r\n        if self.vague == 5:\r\n            vitesse = 5\r\n        elif self.vague == 10:\r\n            self.liste_monstres_terrain.append(monstre.Boss(-10, 450, vitesse, 1000))\r\n            vitesse = 10\r\n        for i in range(self.nb_creep_vague * self.vague):\r\n            self.liste_monstres_entrepot.append(monstre.Monstre(-10, 450, vitesse, 100))\r\n        self.delai_creation_creep = 0\r\n\r\n    def bouger_monstres(self):\r\n\r\n        self.spawn_monstre()\r\n\r\n        for i in self.liste_monstres_terrain:\r\n            i.avancer_monstre(self.path)\r\n        if not self.liste_monstres_entrepot and not self.liste_monstres_terrain:\r\n            self.creer_monstre()\r\n\r\n    def spawn_monstre(self):\r\n        self.delai_creation_creep += 1\r\n        if self.delai_creation_creep == self.delai_creation_creep_max and len(self.liste_monstres_entrepot) != 0:\r\n            temp = self.liste_monstres_entrepot.pop(0)\r\n            self.liste_monstres_terrain.append(temp)\r\n            self.delai_creation_creep = 0\r\n\r\n    def attaque_monstres(self):\r\n        for i in self.liste_tours:\r\n            i.attaque(self.liste_monstres_terrain)\r\n\r\n    def creer_tours(self, event):\r\n        self.argent -= tour.Tour.prix\r\n        x = event.x\r\n        y = event.y\r\n        self.liste_tours.append(tour.Tour_Glace(x, y, 100, 10))\r\n\r\n    def verifier_etat_monstre(self):\r\n        for i in self.liste_monstres_terrain:\r\n            if i.vie <= 0:\r\n                self.pointage += 5\r\n                self.score += 50\r\n                self.argent += 50\r\n                self.liste_monstres_terrain.remove(i)\r\n            if i.x > 1143:\r\n                self.liste_monstres_terrain.remove(i)\r\n                if self.vie > 0:\r\n                    self.vie -= 1\r\n            if i.empoisonne == True:\r\n                i.vie -= tour.Tour_Poison.degat\r\n\r\n\r\n    def verifier_etat_joueur(self):\r\n        if self.vie == 0:\r\n            self.parent.partie_en_cours = 0\r\n            self.fin_de_partie = 0\r\n\r\n    def jouer_tour(self):\r\n        for i in self.animations:\r\n            self.animations[i].jouer_tour()\r\n\r\n    def creer_anim(self, info_gif):\r\n        nom_gif, listeimages = info_gif\r\n        self.animations[nom_gif] = Animer_gif(self, listeimages, 1143, 350)\r\n\r\n    def reinitialiser(self):\r\n        self.liste_monstres_terrain = []\r\n        self.liste_monstres_entrepot = []\r\n        self.liste_projectiles = []\r\n        self.liste_tours = []\r\n        self.vie = 3\r\n        self.vague = 0\r\n        self.pointage = 0\r\n        self.fin_de_partie =1\r\n        self.argent = 1000\r\n\r\n\r\nclass Controleur:\r\n    def __init__(self):\r\n        self.partie_en_cours = 0\r\n\r\n        self.modele = Modele(self)\r\n        self.vue = Vue(self)\r\n        self.vue.afficher_debut_partie()\r\n        self.vue.root.mainloop()\r\n\r\n    def debuter_partie(self):\r\n        if not self.partie_en_cours:\r\n            self.partie_en_cours = 1\r\n            self.jouer_partie()\r\n\r\n\r\n    def jouer_partie(self):\r\n        if self.partie_en_cours:\r\n            rep = self.modele.jouer_partie()\r\n            if rep:\r\n                self.modele.jouer_tour()\r\n                self.vue.afficher_partie()\r\n                self.vue.root.after(40, self.jouer_partie)\r\n            else:\r\n                self.vue.afficher_fin_partie()\r\n                self.partie_en_cours = 0\r\n                self.modele.reinitialiser()\r\n\r\n\r\n    def creer_tour(self, event):\r\n        if self.partie_en_cours:\r\n            self.modele.creer_tours(event)\r\n\r\n    def creer_anim(self, info_gif):\r\n        self.modele.creer_anim(info_gif)\r\n\r\n\r\nif __name__ == '__main__':\r\n    c = Controleur()\r\n    print(\"L'application se termine\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 02c74d11776b3dfc466ac2465c7e20fd99c1634d)
+++ b/main.py	(date 1645736164563)
@@ -229,7 +229,7 @@
 
     def attaque_monstres(self):
         for i in self.liste_tours:
-            i.attaque(self.liste_monstres_terrain)
+            i.action(self.liste_monstres_terrain)
 
     def creer_tours(self, event):
         self.argent -= tour.Tour.prix
