Index: tour.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import helper\r\n\r\nfrom monstre import Monstre\r\n\r\n\r\nclass Tour(object):\r\n    prix = 400\r\n\r\n    def __init__(self, x, y, rayon, demie_taille, vitesse_attaque=20, degat=50):\r\n        self.voir_rayon = False\r\n        self.x = x\r\n        self.y = y\r\n        self.rayon = rayon\r\n        self.demie_taille = demie_taille\r\n        self.vitesse_attaque = vitesse_attaque\r\n        self.degat = degat\r\n        self.niveau = 1\r\n        self.delai_tire = 0\r\n        self.liste_projectiles = []\r\n\r\n    def analyse_rayon(self, monstre):\r\n        if helper.Helper().calcDistance(self.x, self.y, monstre.x, monstre.y) <= self.rayon:\r\n            return True\r\n\r\n    def action(self, liste_monstre):\r\n        self.delai_tire += 1\r\n        for monstre in liste_monstre:\r\n            if self.analyse_rayon(monstre) and self.delai_tire >= self.vitesse_attaque:\r\n                if isinstance(self, Tour_Bombe):\r\n                    self.liste_projectiles.append(Projectile_Bombe(self.x, self.y, self.degat, monstre))\r\n                elif isinstance(self, Tour_Sniper):\r\n                    self.liste_projectiles.append(Projectile(self.x, self.y, self.degat, monstre))\r\n                else:\r\n                    self.liste_projectiles.append(Projectile(self.x, self.y, self.degat, monstre))\r\n                self.delai_tire = 0\r\n        self.lancer_projectiles(liste_monstre)\r\n\r\n    def lancer_projectiles(self, liste_monstre):\r\n        if len(self.liste_projectiles) != 0:\r\n            for projectile in self.liste_projectiles:\r\n                projectile.lancer_projectile()\r\n                if projectile.atteindre_cible(liste_monstre):\r\n                    self.liste_projectiles.remove(projectile)\r\n\r\n    def upgrade(self):\r\n        self.niveau += 1\r\n\r\n    def rayon_visible(self):\r\n        self.voir_rayon = not self.voir_rayon\r\n\r\n\r\nclass Tour_Glace(Tour):\r\n    prix = 500\r\n\r\n    def __init__(self, x, y, rayon, demie_taille, id):\r\n        Tour.__init__(self, x, y, rayon, 75, demie_taille)\r\n        self.vitesse_ralentissement = 0.2\r\n        self.id = id\r\n        self.prix_niveau = Tour_Glace.prix + 100\r\n\r\n    def action(self, liste_monstre):\r\n\r\n        for monstre in liste_monstre:\r\n\r\n            if self.analyse_rayon(monstre):\r\n                print(monstre.vitesse)\r\n                monstre.vitesse = 1-self.vitesse_ralentissement\r\n                monstre.frozen = True\r\n                print(monstre.vitesse)\r\n            else:\r\n                monstre.vitesse = Monstre.vitesse\r\n                monstre.frozen = False\r\n\r\n    def upgrade(self):\r\n\r\n        if self.niveau < 3:\r\n            self.niveau += 1\r\n            if self.niveau == 1:\r\n                self.vitesse_ralentissement -= 0.2\r\n            elif self.niveau == 2:\r\n                self.prix_niveau += 200\r\n                self.rayon += 25\r\n            elif self.niveau == 3:\r\n                self.prix_niveau = \"max\"\r\n                self.vitesse_ralentissement -= 0.6\r\n\r\n\r\nclass Tour_Sniper(Tour):\r\n    prix = 400\r\n\r\n    def __init__(self, x, y, rayon, demie_taille, id):\r\n        Tour.__init__(self, x, y, rayon, demie_taille, 60, 100)\r\n        self.delai_tire = 0\r\n        self.liste_projectiles = []\r\n        self.id = id\r\n        self.prix_niveau = Tour_Sniper.prix+100\r\n\r\n    def upgrade(self):\r\n        if self.niveau < 3:\r\n            self.niveau += 1\r\n            if self.niveau == 1:\r\n                self.vitesse_attaque -= 20\r\n            elif self.niveau == 2:\r\n                self.prix_niveau += 200\r\n                self.degat += 50\r\n            elif self.niveau == 3:\r\n                self.prix_niveau = \"max\"\r\n                self.rayon += 50\r\n                self.degat += 50\r\n                self.vitesse_attaque -= 20\r\n\r\n\r\nclass Tour_Poison(Tour):\r\n    degat = 0.15\r\n    prix = 300\r\n    stack_poison = 0\r\n\r\n    def __init__(self, x, y, rayon, demie_taille, id):\r\n        Tour.__init__(self, x, y, rayon, demie_taille)\r\n        self.stack_poison = 0\r\n        self.id = id\r\n        self.prix_niveau = Tour_Poison.prix + 100\r\n\r\n    def action(self, liste_monstre):\r\n        for monstre in liste_monstre:\r\n            if self.analyse_rayon(monstre):\r\n                monstre.stack_poison += 1\r\n                monstre.empoisonne = True\r\n\r\n    def upgrade(self):\r\n        if self.niveau < 3:\r\n            self.niveau += 1\r\n            if self.niveau == 1:\r\n                self.rayon += 10\r\n            elif self.niveau == 2:\r\n                self.prix_niveau += 200\r\n                pass\r\n            elif self.niveau == 3:\r\n                self.prix_niveau = \"max\"\r\n                pass\r\n\r\n\r\nclass Tour_Bombe(Tour):\r\n    prix = 600\r\n\r\n    def __init__(self, x, y, rayon, demie_taille, id):\r\n        Tour.__init__(self, x, y, rayon, demie_taille, 60, 50)\r\n        self.delai_tire = 0\r\n        self.liste_projectiles = []\r\n        self.id = id\r\n        self.niveau = 1\r\n        self.prix_niveau = Tour_Bombe.prix + 100\r\n\r\n    def upgrade(self):\r\n        if self.niveau < 3:\r\n            self.niveau += 1\r\n            if self.niveau == 1:\r\n                self.degat += 10\r\n            elif self.niveau == 2:\r\n                self.prix_niveau += 200\r\n                self.vitesse_attaque -= 20\r\n            elif self.niveau == 3:\r\n                self.prix_niveau = \"max\"\r\n                self.rayon += 10\r\n                self.degat += 15\r\n                self.vitesse_attaque -= 10\r\n\r\n\r\nclass Tour_Mitraillette(Tour):\r\n    prix = 300\r\n\r\n    def __init__(self, x, y, rayon, demie_taille, id):\r\n        Tour.__init__(self, x, y, rayon, demie_taille, 10, 10)\r\n        self.delai_tire = 0\r\n        self.liste_projectiles = []\r\n        self.id = id\r\n        self.prix_niveau = Tour_Mitraillette.prix + 100\r\n\r\n    def upgrade(self):\r\n        if self.niveau < 3:\r\n            self.niveau += 1\r\n            if self.niveau == 1:\r\n                self.vitesse_attaque -= 2\r\n                self.degat += 3\r\n            elif self.niveau == 2:\r\n                self.prix_niveau += 200\r\n                self.vitesse_attaque -= 3\r\n                self.degat += 4\r\n            elif self.niveau == 3:\r\n                self.prix_niveau = \"max\"\r\n                self.vitesse_attaque -= 4\r\n                self.degat += 5\r\n\r\n\r\nclass Projectile(object):\r\n    def __init__(self, x, y, degat, monstre):\r\n        self.x = x\r\n        self.y = y\r\n        self.degat = degat\r\n        self.vitesse = 20\r\n        self.monstre = monstre\r\n        self.delai = 0\r\n\r\n    def lancer_projectile(self):\r\n        self.delai += 1\r\n        distance = helper.Helper.calcDistance(self.x, self.y, self.monstre.x, self.monstre.y)\r\n        if distance > 0:\r\n            angle = helper.Helper.calcAngle(self.x, self.y, self.monstre.x, self.monstre.y)\r\n            cible = helper.Helper.getAngledPoint(angle, self.vitesse, self.x, self.y)\r\n            self.x = cible[0]\r\n            self.y = cible[1]\r\n\r\n    def atteindre_cible(self, liste_monstre=None):\r\n        if liste_monstre is None:\r\n            liste_monstre = []\r\n        isDead = False\r\n        if self.monstre is None:\r\n            isDead = True\r\n\r\n        cibleX = self.monstre.x\r\n        cibleY = self.monstre.y\r\n        if (cibleX + 12 >= self.x >= cibleX - 12) and (cibleY + 12 >= self.y >= cibleY - 12):\r\n            isDead = True\r\n            self.monstre.vie -= self.degat\r\n\r\n        return isDead\r\n\r\n\r\nclass Projectile_Bombe(Projectile):\r\n    def __init__(self, x, y, degat, monstre):\r\n        Projectile.__init__(self, x, y, degat, monstre)\r\n        self.rayon = 100\r\n\r\n    def atteindre_cible(self, liste_monstre):\r\n        isDead = False\r\n\r\n        if self.monstre is None:\r\n            isDead = True\r\n\r\n        cibleX = self.monstre.x\r\n        cibleY = self.monstre.y\r\n        if (cibleX + 12 >= self.x >= cibleX - 12) and (cibleY + 12 >= self.y >= cibleY - 12):\r\n            isDead = True\r\n            explosion_list = self.explosion(liste_monstre)\r\n            for monstre_bombe in explosion_list:\r\n                monstre_bombe.vie -= self.degat\r\n\r\n        return isDead\r\n\r\n    def explosion(self, monstre_list):\r\n        explosion_list = []\r\n        for monstre in monstre_list:\r\n            if helper.Helper().calcDistance(self.x, self.y, monstre.x, monstre.y) <= self.rayon:\r\n                explosion_list.append(monstre)\r\n        return explosion_list\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tour.py b/tour.py
--- a/tour.py	(revision a887cf07c03cabb75c5e23784114d47c57ee9d9c)
+++ b/tour.py	(date 1646683721821)
@@ -50,10 +50,10 @@
 
 
 class Tour_Glace(Tour):
-    prix = 500
+    prix = 300
 
     def __init__(self, x, y, rayon, demie_taille, id):
-        Tour.__init__(self, x, y, rayon, 75, demie_taille)
+        Tour.__init__(self, x, y, rayon, demie_taille)
         self.vitesse_ralentissement = 0.2
         self.id = id
         self.prix_niveau = Tour_Glace.prix + 100
@@ -112,7 +112,7 @@
 
 class Tour_Poison(Tour):
     degat = 0.15
-    prix = 300
+    prix = 350
     stack_poison = 0
 
     def __init__(self, x, y, rayon, demie_taille, id):
@@ -141,7 +141,7 @@
 
 
 class Tour_Bombe(Tour):
-    prix = 600
+    prix = 500
 
     def __init__(self, x, y, rayon, demie_taille, id):
         Tour.__init__(self, x, y, rayon, demie_taille, 60, 50)
@@ -167,7 +167,7 @@
 
 
 class Tour_Mitraillette(Tour):
-    prix = 300
+    prix = 250
 
     def __init__(self, x, y, rayon, demie_taille, id):
         Tour.__init__(self, x, y, rayon, demie_taille, 10, 10)
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\n\r\nimport monstre\r\nimport tour\r\nfrom tkinter import filedialog as fd\r\n\r\nmon_id = 0\r\n\r\n\r\ndef creer_id():\r\n    global mon_id\r\n    mon_id += 1\r\n    id = \"id_\" + str(mon_id)\r\n    return id\r\n\r\n\r\nclass Vue:\r\n    def __init__(self, parent):\r\n        self.tour_selectionne = None\r\n        self.parent = parent\r\n        self.modele = self.parent.modele\r\n        self.root = Tk()\r\n        self.root.title(\"TowerDefence, alpha_0.1\")\r\n        self.dictionnaire_images = {}\r\n        self.cadre_actif = None\r\n        self.cadres = {}\r\n        self.creer_cadres()\r\n        self.initialiser_images()\r\n        self.changer_cadre(\"cadre_splash\")\r\n        self.ouvrir_gif()\r\n\r\n    def changer_cadre(self, nom_cadre):\r\n        if nom_cadre in self.cadres.keys():\r\n            if self.cadre_actif:\r\n                self.cadre_actif.pack_forget()\r\n            cadre = self.cadres[nom_cadre]\r\n            self.cadre_actif = cadre\r\n            cadre.pack()\r\n\r\n    def creer_cadres(self):\r\n        self.cadres[\"cadre_splash\"] = self.creer_cadre_splash()\r\n        self.cadres[\"cadre_jeu\"] = self.creer_interface()\r\n        self.cadres[\"menu_mort\"] = self.creer_cadre_mort()\r\n\r\n    def initialiser_images(self):\r\n        self.dictionnaire_images[\"monstre\"] = \"Images/gifs/monstres.gif\"\r\n        self.dictionnaire_images[\"portail\"] = \"Images/gifs/portal.gif\"\r\n        self.dictionnaire_images[\"boss\"] = \"Images/gifs/Boss.gif\"\r\n\r\n    def ouvrir_gif(self):\r\n        animations = self.charger_gifs()\r\n        if animations:\r\n            self.parent.inserer_animation(animations)\r\n\r\n    def charger_gifs(self):\r\n        dictionnaire_temp = {}\r\n        for nom_gif, chemin in self.dictionnaire_images.items():\r\n            if chemin:\r\n                listeimages = []\r\n                testverite = 1\r\n                noindex = 0\r\n                while testverite:\r\n                    try:\r\n                        img = PhotoImage(file=chemin, format=\"gif -index \" + str(noindex))\r\n                        listeimages.append(img)\r\n                        noindex += 1\r\n                    except Exception:\r\n                        testverite = 0\r\n                dictionnaire_temp[nom_gif] = listeimages\r\n\r\n        return dictionnaire_temp\r\n\r\n    def creer_tour(self, event):\r\n        self.parent.creer_tour(event)\r\n\r\n    def creer_tour_glace(self):\r\n        self.parent.creer_tour_glace()\r\n\r\n    def creer_tour_poison(self):\r\n        self.parent.creer_tour_poison()\r\n\r\n    def creer_tour_sniper(self):\r\n        self.parent.creer_tour_sniper()\r\n\r\n    def creer_tour_mitraillette(self):\r\n        self.parent.creer_tour_mitraillette()\r\n\r\n    def creer_tour_bombe(self):\r\n        self.parent.creer_tour_bombe()\r\n\r\n    def creer_cadre_splash(self):\r\n        menu_bg_width = 1000\r\n        menu_bg_heigth = 667\r\n        self.cadre_splash = Frame(self.root)\r\n        self.ouverture_canvas = Canvas(self.cadre_splash, width=menu_bg_width, height=menu_bg_heigth)\r\n        self.menu_bg = PhotoImage(file=\"Images/backgrounds/splash_bg.png\")\r\n        self.menu_bg.width()\r\n        self.menu_bg.height()\r\n\r\n        bouton_depart = Button(self.ouverture_canvas, text='Jouer')\r\n        bouton_depart.bind(\"<Button>\", self.test_jeu)\r\n        self.ouverture_canvas.create_window(menu_bg_width / 2, menu_bg_heigth / 2 + 100, window=bouton_depart)\r\n        self.ouverture_canvas.pack()\r\n        self.ouverture_canvas.create_image(menu_bg_width / 2, menu_bg_heigth / 2, image=self.menu_bg,\r\n                                           tags=(\"statique\", \"bg_menu\"))\r\n\r\n        return self.cadre_splash\r\n\r\n    def creer_cadre_mort(self):\r\n        self.cadre_mort = Frame(self.root)\r\n        self.mort_canvas = Canvas(self.cadre_mort, width=self.modele.largeur_carte, height=self.modele.hauteur_carte)\r\n        self.ouverture_canvas.pack()\r\n\r\n    def test_jeu(self, evt):\r\n        self.changer_cadre(\"cadre_jeu\")\r\n\r\n    def creer_interface(self):\r\n\r\n        self.cadre_jeu = Frame(self.root)\r\n        # cadre HUD affichant la duree\r\n        self.canevas = Canvas(self.cadre_jeu, width=self.modele.largeur_carte, height=self.modele.hauteur_carte)\r\n        self.bg = PhotoImage(file=\"Images/backgrounds/carte.png\")\r\n        self.bg.width()\r\n\r\n        self.message = \"\"\r\n        self.var_vie = StringVar()\r\n        self.var_score = StringVar()\r\n        self.var_vague = StringVar()\r\n        self.var_argent = StringVar()\r\n        self.var_upgrade = StringVar()\r\n\r\n        self.image_argent = PhotoImage(file=\"Images/money.png\")\r\n        self.image_tour_glace1 = PhotoImage(file=\"Images/towers/ice_tower1.png\")\r\n        self.image_tour_glace2 = PhotoImage(file=\"Images/towers/ice_tower2.png\")\r\n        self.image_tour_glace3 = PhotoImage(file=\"Images/towers/ice_tower3.png\")\r\n\r\n        self.image_tour_sniper1 = PhotoImage(file=\"Images/towers/tour_sniper1.png\")\r\n        self.image_tour_sniper2 = PhotoImage(file=\"Images/towers/tour_sniper2.png\")\r\n        self.image_tour_sniper3 = PhotoImage(file=\"Images/towers/tour_sniper3.png\")\r\n\r\n        self.image_tour_feu1 = PhotoImage(file=\"Images/towers/tour_feu1.png\")\r\n        self.image_tour_feu2 = PhotoImage(file=\"Images/towers/tour_feu2.png\")\r\n        self.image_tour_feu3 = PhotoImage(file=\"Images/towers/tour_feu3.png\")\r\n\r\n        self.image_tour_mitraillette1 = PhotoImage(file=\"Images/towers/tour_mitraillette1.png\")\r\n        self.image_tour_mitraillette2 = PhotoImage(file=\"Images/towers/tour_mitraillette2.png\")\r\n        self.image_tour_mitraillette3 = PhotoImage(file=\"Images/towers/tour_mitraillette3.png\")\r\n\r\n        self.image_tour_bombe1 = PhotoImage(file=\"Images/towers/tower_bombe.png\")\r\n        self.image_tour_bombe2 = PhotoImage(file=\"Images/towers/tower_bombe2.png\")\r\n        self.image_tour_bombe3 = PhotoImage(file=\"Images/towers/tower_bombe3.png\")\r\n\r\n        self.cadre_depart = Frame(self.cadre_jeu, bg='gray')\r\n        self.cadre_fin = Frame(self.cadre_jeu, bg='gray')\r\n\r\n        bouton_depart = Button(self.cadre_depart, text='Commencer la partie', command=self.parent.debuter_partie)\r\n        bouton_pause = Button(self.cadre_depart, text='Pause', command=self.parent.partie_pause)\r\n        bouton_tour_glace = Button(self.cadre_fin, text='TOUR GLACE - ' + str(tour.Tour_Glace.prix) + '$', width=20,\r\n                                   height=1, font=('Arial', 8),\r\n                                   command=self.creer_tour_glace)\r\n        bouton_tour_poison = Button(self.cadre_fin, text='TOUR POISON - ' + str(tour.Tour_Poison.prix) + '$',\r\n                                    font=('Arial', 8), width=20, height=1,\r\n                                    command=self.creer_tour_poison)\r\n        bouton_tour_mitraillette = Button(self.cadre_fin,\r\n                                          text='TOUR MITRAILETTE - ' + str(tour.Tour_Mitraillette.prix) + '$',\r\n                                          font=('Arial', 8), width=22, height=1,\r\n                                          command=self.creer_tour_mitraillette)\r\n        bouton_tour_bombe = Button(self.cadre_fin, text='TOUR BOMBE - ' + str(tour.Tour_Bombe.prix) + '$',\r\n                                   font=('Arial', 8), width=20, height=1,\r\n                                   command=self.creer_tour_bombe)\r\n        bouton_tour_sniper = Button(self.cadre_fin, text='TOUR SNIPER - ' + str(tour.Tour_Sniper.prix) + '$',\r\n                                    font=('Arial', 8), width=20, height=1,\r\n                                    command=self.creer_tour_sniper)\r\n\r\n        bouton_upgrade = Button(self.cadre_fin, text=\"Amélioration de la tour\", command=self.upgrade)\r\n        label_information_amelioration = Label(self.cadre_fin, height=1, textvariable=self.var_upgrade)\r\n\r\n        self.canevas.tag_bind(\"bg\", \"<Button-1>\", self.creer_tour)\r\n        self.canevas.tag_bind(\"tour\", \"<Button-1>\", self.update_information)\r\n\r\n        label_image_score = Label(self.cadre_depart, text='SCORE', height=1)\r\n        label_vague_texte = Label(self.cadre_depart, text='VAGUE', height=1)\r\n        label_vie_texte = Label(self.cadre_depart, text='VIE', height=1)\r\n\r\n        label_image_argent = Label(self.cadre_depart, image=self.image_argent, height=30)\r\n        label_argent = Label(self.cadre_depart, width=10, height=2, font=('Arial', 11),\r\n                             textvariable=self.var_argent)\r\n        label_vague = Label(self.cadre_depart, width=5, height=1, font=('Arial', 11),\r\n                            textvariable=self.var_vague)\r\n\r\n        label_score = Label(self.cadre_depart, width=5, height=1, font=('Arial', 11),\r\n                            textvariable=self.var_vie)\r\n        label_vie = Label(self.cadre_depart, width=5, height=1, font=('Arial', 11),\r\n                          textvariable=self.var_score)\r\n\r\n        self.cadre_depart.pack(expand=True, fill=BOTH)\r\n        bouton_depart.pack(side=LEFT, padx=20)\r\n        bouton_pause.pack(side=LEFT, padx=5)\r\n        bouton_tour_glace.pack(side=LEFT, padx=5)\r\n        bouton_tour_poison.pack(side=LEFT, padx=5)\r\n        bouton_tour_sniper.pack(side=LEFT, padx=5)\r\n        bouton_tour_mitraillette.pack(side=LEFT, padx=5)\r\n        bouton_tour_bombe.pack(side=LEFT, padx=5)\r\n\r\n        bouton_upgrade.pack(side=RIGHT, padx=5)\r\n        label_information_amelioration.pack(side=RIGHT, padx=5)\r\n\r\n        label_argent.pack(side=RIGHT)\r\n        label_image_argent.pack(side=RIGHT)\r\n        label_score.pack(side=RIGHT, padx=20)\r\n        label_vie_texte.pack(side=RIGHT, padx=20)\r\n        label_vie.pack(side=RIGHT, padx=20)\r\n        label_image_score.pack(side=RIGHT)\r\n        label_vague.pack(side=RIGHT, padx=20)\r\n        label_vague_texte.pack(side=RIGHT, padx=20)\r\n\r\n        self.canevas.pack()\r\n        self.cadre_fin.pack(expand=True, fill=BOTH)\r\n        return self.cadre_jeu\r\n\r\n    def afficher_debut_partie(self):\r\n        self.canevas.delete(\"dynamique\")\r\n        self.canevas.create_image(self.modele.largeur_carte / 2, self.modele.hauteur_carte / 2, image=self.bg,\r\n                                  tags=(\"statique\", \"bg\"))\r\n        self.afficher_path()\r\n\r\n        self.ouvrir_gif()\r\n\r\n    def afficher_partie(self):\r\n        self.canevas.delete(\"dynamique\")\r\n        self.var_argent.set(str(self.modele.argent) + \"$\")\r\n        self.var_score.set(self.modele.pointage)\r\n        self.var_vie.set(self.modele.vie)\r\n        self.var_vague.set(self.modele.vague)\r\n        self.update_message()\r\n        self.var_upgrade.set(self.message)\r\n\r\n        if len(self.modele.dictionnaire_tours) > 0:\r\n            if self.tour_selectionne is not None:\r\n                if self.tour_selectionne.voir_rayon:\r\n                    i = self.tour_selectionne\r\n                    rayon = self.tour_selectionne.rayon\r\n                    self.canevas.create_oval(i.x - rayon, i.y - rayon, i.x + rayon, i.y + rayon, outline=\"black\",\r\n                                             tags=(\"rayon\", \"bg\"))\r\n\r\n        for i in self.modele.dictionnaire_tours:\r\n            i = self.modele.dictionnaire_tours[i]\r\n            if len(i.liste_projectiles) != 0:\r\n                for j in i.liste_projectiles:\r\n                    if isinstance(i, tour.Tour_Bombe):\r\n                        self.canevas.create_oval(j.x - 10, j.y - 10, j.x + 10, j.y + 10,\r\n                                                 fill=\"darkred\", tags=\"dynamique\")\r\n                    elif isinstance(i, tour.Tour_Mitraillette):\r\n                        self.canevas.create_oval(j.x - 5, j.y - 5, j.x + 5, j.y + 5,\r\n                                                 fill=\"yellow\", tags=\"dynamique\")\r\n                    elif isinstance(i, tour.Tour_Sniper):\r\n                        self.canevas.create_rectangle(j.x - 5, j.y - 5, j.x + 5, j.y + 5,\r\n                                                      fill=\"#6b83a6\", tags=\"dynamique\")\r\n        self.afficher_portail()\r\n        self.afficher_monstres()\r\n\r\n    def afficher_portail(self):\r\n        portail = self.modele.portail\r\n        self.canevas.create_image(portail.x, portail.y, image=portail.images[portail.indice], tags=(\"dynamique\"))\r\n\r\n    def afficher_tour(self, tour_a_afficher):\r\n        self.canevas.delete(tour_a_afficher.id)\r\n\r\n        tag = None\r\n\r\n        if isinstance(tour_a_afficher, tour.Tour_Sniper):\r\n            if tour_a_afficher.niveau == 1:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_sniper1,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"sn1\"))\r\n            if tour_a_afficher.niveau == 2:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_sniper2,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"sn2\"))\r\n            if tour_a_afficher.niveau == 3:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_sniper3,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"sn3\"))\r\n        elif isinstance(tour_a_afficher, tour.Tour_Poison):\r\n            if tour_a_afficher.niveau == 1:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_feu1,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"pn1\"))\r\n            if tour_a_afficher.niveau == 2:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_feu2,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"pn2\"))\r\n            if tour_a_afficher.niveau == 3:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_feu3,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"pn3\"))\r\n        elif isinstance(tour_a_afficher, tour.Tour_Glace):\r\n            if tour_a_afficher.niveau == 1:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_glace1,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"gn1\"))\r\n            if tour_a_afficher.niveau == 2:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_glace2,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"gn2\"))\r\n            if tour_a_afficher.niveau == 3:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_glace3,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"gn3\"))\r\n        elif isinstance(tour_a_afficher, tour.Tour_Bombe):\r\n            if tour_a_afficher.niveau == 1:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_bombe1,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"bn1\"))\r\n            if tour_a_afficher.niveau == 2:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_bombe2,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"bn2\"))\r\n            if tour_a_afficher.niveau == 3:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_bombe3,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"bn3\"))\r\n        elif isinstance(tour_a_afficher, tour.Tour_Mitraillette):\r\n            if tour_a_afficher.niveau == 1:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_mitraillette1,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"mn1\"))\r\n            if tour_a_afficher.niveau == 2:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_mitraillette2,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"mn2\"))\r\n            if tour_a_afficher.niveau == 3:\r\n                self.canevas.create_image(tour_a_afficher.x, tour_a_afficher.y, image=self.image_tour_mitraillette3,\r\n                                          tags=(\"statique\", tour_a_afficher.id, \"tour\", \"mn3\"))\r\n\r\n    def afficher_path(self):\r\n        self.canevas.create_rectangle(0, 355, 240, 475, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(160, 140, 240, 400, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(160, 140, 485, 250, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(400, 140, 485, 560, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(400, 460, 800, 560, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(720, 320, 800, 560, fill=\"\", outline=\"\", tags=\"statique\")\r\n        self.canevas.create_rectangle(720, 300, 1200, 400, fill=\"\", outline=\"\", tags=\"statique\")\r\n\r\n    def afficher_monstres(self):\r\n        for i in self.modele.liste_monstres_terrain:\r\n\r\n            if isinstance(i, monstre.Monstre):\r\n\r\n                if i.images != None:\r\n                    self.canevas.create_image(i.x, i.y, image=i.images[i.indice], tags=(\"dynamique\"))\r\n                else:\r\n                    self.canevas.create_oval(i.x - 5, i.y - 5, i.x + 5, i.y + 5, fill=\"black\", tags=(\"dynamique\"))\r\n                x1 = i.x - 10\r\n                x2 = x1 + 20\r\n                longueur = 30\r\n                x3 = x1 + (i.vie / monstre.Monstre.vie_max * 20)\r\n\r\n                self.canevas.create_rectangle(x1, i.y - 15, x2, i.y - 10, fill=\"#7a0004\", tags=(\"dynamique\"))\r\n                self.canevas.create_rectangle(x1, i.y - 15, x3, i.y - 10, fill=\"#33673b\", tags=(\"dynamique\"))\r\n\r\n                if i.empoisonne:\r\n                    self.canevas.create_rectangle(x1, i.y - 15, x2, i.y - 10, fill=\"#e09f3e\", tags=(\"dynamique\"))\r\n                    self.canevas.create_rectangle(x1, i.y - 15, x3, i.y - 10, fill=\"darkgreen\", tags=(\"dynamique\"))\r\n                if i.frozen:\r\n                    self.canevas.create_rectangle(x1, i.y - 15, x2, i.y - 10, fill=\"lightblue\", tags=(\"dynamique\"))\r\n                    self.canevas.create_rectangle(x1, i.y - 15, x3, i.y - 10, fill=\"darkblue\", tags=(\"dynamique\"))\r\n\r\n            if isinstance(i, monstre.Boss):\r\n                self.canevas.create_image(i.x, i.y, image=i.images[i.indice], tags=(\"dynamique\"))\r\n                # self.canevas.create_oval(i.x - 15, i.y - 15, i.x + 15, i.y + 15, fill=\"red\", tags=(\"dynamique\", \"boss\"))\r\n                x1 = i.x - 10\r\n                x2 = x1 + 20\r\n                x3 = x1 + (i.vie / monstre.Boss.vie_max * 20)\r\n                self.canevas.create_rectangle(x1, i.y - 15, x2, i.y - 10, fill=\"red\", tags=\"dynamique\")\r\n                self.canevas.create_rectangle(x1, i.y - 15, x3, i.y - 10, fill=\"green\", tags=\"dynamique\")\r\n\r\n    def afficher_fin_partie(self):\r\n        self.canevas.delete(\"dynamique\")\r\n        self.var_argent.set(str(self.modele.argent) + \"$\")\r\n        self.var_score.set(self.modele.pointage)\r\n        self.var_vie.set(self.modele.vie)\r\n        self.var_vague.set(self.modele.vague)\r\n\r\n        print(\"fin de partie\")\r\n\r\n    def reinitialiser_vue(self):\r\n        self.canevas.delete(ALL)\r\n        self.afficher_debut_partie()\r\n\r\n    def update_information(self, event):\r\n        val = self.canevas.gettags(CURRENT)\r\n        self.canevas.delete(\"rayon\")\r\n        self.tour_selectionne = self.modele.dictionnaire_tours[(val[1])]\r\n        self.tour_selectionne.rayon_visible()\r\n\r\n\r\n    def upgrade(self):\r\n        self.parent.upgrade(self.tour_selectionne)\r\n\r\n        self.canevas.delete(\"rayon\")\r\n        self.afficher_tour(self.tour_selectionne)\r\n\r\n    def update_message(self):\r\n        if self.tour_selectionne:\r\n            self.message = \"niveau : \" + str(self.tour_selectionne.niveau) + \" - prix de l'amélioration : \" + str(\r\n            self.tour_selectionne.prix_niveau) + \" $\"\r\n\r\n\r\nclass Modele:\r\n    def __init__(self, parent):\r\n        self.tour_en_cours = None\r\n        self.parent = parent\r\n        self.largeur_carte = 1200\r\n        self.hauteur_carte = 800\r\n        self.path = [[200, 450], [200, 200], [440, 200], [440, 520], [760, 520], [760, 370], [1250, 370]]\r\n        self.fin_de_partie = 1\r\n        self.delai_creation_creep = 0\r\n        self.nb_creep_vague = 10\r\n        self.delai_creation_creep_max = 50\r\n        self.pointage = 0\r\n        self.argent = 1000\r\n        self.score = 0\r\n        self.vie = 3\r\n        self.vague = 0\r\n        self.liste_monstres_terrain = []\r\n        self.liste_monstres_entrepot = []\r\n        self.liste_projectiles = []\r\n        self.dictionnaire_tours = {}\r\n        self.animations = {}\r\n        self.portail = None\r\n\r\n    def jouer_partie(self):\r\n        if not self.parent.pause:\r\n            self.bouger_monstres()\r\n            if len(self.dictionnaire_tours) > 0:\r\n                self.attaque_monstres()\r\n            self.verifier_etat_monstre()\r\n            self.verifier_etat_joueur()\r\n        return self.fin_de_partie\r\n\r\n    def jouer_tour(self):\r\n        self.bouger_monstres()\r\n\r\n    def creer_monstre(self):\r\n        self.portail = monstre.Portail(self.animations[\"portail\"])\r\n        self.vague += 1\r\n        self.argent += 50*self.vague\r\n        vitesse = 1 + self.vague / 3\r\n        monstre.Monstre.vie_max = 100 + self.vague * 20\r\n        self.nb_creep_vague = self.vague * 7\r\n        self.delai_creation_creep -= 3\r\n\r\n        if self.vague % 5 == 0:\r\n            self.liste_monstres_terrain.append(monstre.Boss(-10, 450, vitesse, 1000, self.animations[\"boss\"]))\r\n        for i in range(self.nb_creep_vague):\r\n            self.liste_monstres_entrepot.append(\r\n                monstre.Monstre(-10, 450, vitesse, monstre.Monstre.vie_max, self.animations[\"monstre\"]))\r\n        self.delai_creation_creep = 0\r\n\r\n    def bouger_monstres(self):\r\n        if not self.liste_monstres_entrepot and not self.liste_monstres_terrain:\r\n            self.creer_monstre()\r\n        self.portail.animer()\r\n        self.spawn_monstre()\r\n        for i in self.liste_monstres_terrain:\r\n            i.avancer_monstre(self.path)\r\n\r\n    def spawn_monstre(self):\r\n        self.delai_creation_creep += 1\r\n        if self.delai_creation_creep == self.delai_creation_creep_max and len(self.liste_monstres_entrepot) != 0:\r\n            temp = self.liste_monstres_entrepot.pop(0)\r\n            self.liste_monstres_terrain.append(temp)\r\n            self.delai_creation_creep = 0\r\n\r\n    def attaque_monstres(self):\r\n        for i in self.dictionnaire_tours:\r\n            i = self.dictionnaire_tours[i]\r\n            i.action(self.liste_monstres_terrain)\r\n\r\n    def creer_tour(self, event):\r\n\r\n        x = event.x\r\n        y = event.y\r\n        id = creer_id()\r\n        t = None\r\n        if self.tour_en_cours == 'S':\r\n            self.argent -= tour.Tour_Sniper.prix\r\n            t = tour.Tour_Sniper(x, y, 250, 10, id)\r\n        if self.tour_en_cours == 'P':\r\n            self.argent -= tour.Tour_Poison.prix\r\n            t = tour.Tour_Poison(x, y, 100, 10, id)\r\n        if self.tour_en_cours == 'G':\r\n            self.argent -= tour.Tour_Glace.prix\r\n            t = tour.Tour_Glace(x, y, 200, 10, id)\r\n        if self.tour_en_cours == 'B':\r\n            self.argent -= tour.Tour_Bombe.prix\r\n            t = tour.Tour_Bombe(x, y, 100, 10, id)\r\n        if self.tour_en_cours == 'M':\r\n            self.argent -= tour.Tour_Mitraillette.prix\r\n            t = tour.Tour_Mitraillette(x, y, 100, 10, id)\r\n        if t is not None:\r\n            self.dictionnaire_tours[id] = t\r\n            self.parent.afficher_tour(t)\r\n        self.tour_en_cours = None\r\n\r\n    def verifier_etat_monstre(self):\r\n        for i in self.liste_monstres_terrain:\r\n            if i.vie <= 0:\r\n                self.pointage += 5\r\n                self.score += 50\r\n                self.argent += 25\r\n                self.liste_monstres_terrain.remove(i)\r\n            if i.x > 1143:\r\n                self.liste_monstres_terrain.remove(i)\r\n                if self.vie > 0:\r\n                    self.vie -= 1\r\n            if i.empoisonne:\r\n                i.vie -= tour.Tour_Poison.degat + i.stack_poison / 1000\r\n\r\n    def verifier_etat_joueur(self):\r\n        if self.vie == 0:\r\n            self.parent.partie_en_cours = 0\r\n            self.fin_de_partie = 0\r\n\r\n    def reinitialiser(self):\r\n        self.liste_monstres_terrain = []\r\n        self.liste_monstres_entrepot = []\r\n        self.liste_projectiles = []\r\n        self.dictionnaire_tours = {}\r\n        self.vie = 3\r\n        self.vague = 0\r\n        self.pointage = 0\r\n        self.fin_de_partie = 1\r\n        self.argent = 1000\r\n        self.parent.reinitialiser_vue()\r\n\r\n    def creer_sniper(self):\r\n        if (self.argent - tour.Tour_Sniper.prix) >= 0:\r\n            self.tour_en_cours = 'S'\r\n\r\n    def creer_poison(self):\r\n        if (self.argent - tour.Tour_Poison.prix) >= 0:\r\n            self.tour_en_cours = 'P'\r\n\r\n    def creer_bombe(self):\r\n        if (self.argent - tour.Tour_Bombe.prix) >= 0:\r\n            self.tour_en_cours = 'B'\r\n\r\n    def creer_glace(self):\r\n        if (self.argent - tour.Tour_Glace.prix) >= 0:\r\n            self.tour_en_cours = 'G'\r\n\r\n    def creer_mitraillette(self):\r\n        if (self.argent - tour.Tour_Mitraillette.prix) >= 0:\r\n            self.tour_en_cours = 'M'\r\n\r\n    def trouver_tour(self, id):\r\n        objet = self.dictionnaire_tours[id]\r\n        return objet\r\n\r\n    def upgrade(self, tour):\r\n        if tour.prix_niveau <= self.argent:\r\n            self.argent -= tour.prix_niveau\r\n            tour.upgrade()\r\n\r\n\r\n\r\nclass Controleur:\r\n    def __init__(self):\r\n        self.partie_en_cours = 0\r\n        self.pause = False\r\n        self.modele = Modele(self)\r\n        self.vue = Vue(self)\r\n        self.vue.afficher_debut_partie()\r\n        self.vue.root.mainloop()\r\n\r\n    def debuter_partie(self):\r\n        if not self.partie_en_cours:\r\n            self.partie_en_cours = 1\r\n            self.jouer_partie()\r\n\r\n    def jouer_partie(self):\r\n        if self.partie_en_cours:\r\n            partie_roule = self.modele.jouer_partie()\r\n            if partie_roule:\r\n                if not self.pause:\r\n                    self.modele.jouer_tour()\r\n                self.vue.afficher_partie()\r\n                self.vue.root.after(40, self.jouer_partie)\r\n            else:\r\n                self.vue.afficher_fin_partie()\r\n                self.partie_en_cours = 0\r\n                self.modele.reinitialiser()\r\n\r\n    def creer_tour(self, event):\r\n        if self.partie_en_cours:\r\n            self.modele.creer_tour(event)\r\n\r\n    def creer_tour_glace(self):\r\n        if self.partie_en_cours:\r\n            self.modele.creer_glace()\r\n\r\n    def creer_tour_sniper(self):\r\n        if self.partie_en_cours:\r\n            self.modele.creer_sniper()\r\n\r\n    def creer_tour_poison(self):\r\n        if self.partie_en_cours:\r\n            self.modele.creer_poison()\r\n\r\n    def creer_tour_mitraillette(self):\r\n        if self.partie_en_cours:\r\n            self.modele.creer_mitraillette()\r\n\r\n    def creer_tour_bombe(self):\r\n        if self.partie_en_cours:\r\n            self.modele.creer_bombe()\r\n\r\n    def inserer_animation(self, info_gif):\r\n        self.modele.animations = info_gif\r\n\r\n    def trouver_tour(self, id):\r\n        self.modele.trouver_tour(id)\r\n\r\n    def afficher_tour(self, tour):\r\n        self.vue.afficher_tour(tour)\r\n\r\n    def reinitialiser_vue(self):\r\n        self.vue.reinitialiser_vue()\r\n\r\n    def partie_pause(self):\r\n        if self.pause:\r\n            self.pause = False\r\n            return self.pause\r\n        self.pause = True\r\n        return self.pause\r\n\r\n    def upgrade(self, tour):\r\n        self.modele.upgrade(tour)\r\n\r\n\r\nif __name__ == '__main__':\r\n    c = Controleur()\r\n    print(\"L'application se termine\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision a887cf07c03cabb75c5e23784114d47c57ee9d9c)
+++ b/main.py	(date 1646684188594)
@@ -475,10 +475,10 @@
             t = tour.Tour_Sniper(x, y, 250, 10, id)
         if self.tour_en_cours == 'P':
             self.argent -= tour.Tour_Poison.prix
-            t = tour.Tour_Poison(x, y, 100, 10, id)
+            t = tour.Tour_Poison(x, y, 150, 10, id)
         if self.tour_en_cours == 'G':
             self.argent -= tour.Tour_Glace.prix
-            t = tour.Tour_Glace(x, y, 200, 10, id)
+            t = tour.Tour_Glace(x, y, 150, 10, id)
         if self.tour_en_cours == 'B':
             self.argent -= tour.Tour_Bombe.prix
             t = tour.Tour_Bombe(x, y, 100, 10, id)
